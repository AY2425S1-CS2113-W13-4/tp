@startuml App Diagram

'https://plantuml.com/class-diagram
' !include Style.puml
skinparam classAttributeIconSize 0
skinparam classMethodIconSize 0
skinparam linetype ortho

package TutorLink <<Rectangle>>{

class CommandResult {
    + CommandResult(msg: String)
    + toString(): String
}

class Ui {
    + displayResult(result: CommandResult)
    + displayException(error: TutorLinkException)
    + displayWelcomeMessage()
    + getUserInput(): String
}

Ui .. CommandResult

Ui .. TutorLinkException

abstract class TutorLinkException

abstract class Command {
    + Command() {abstract}
    + {abstract}{static} getCommandWord() : String
    + {abstract}{static} getArguments() : String[]
    + execute(state: AppState, arguments: HashMap<String, String>): CommandResult {abstract}
}

Command ..right.. CommandResult


abstract class Component {
    - name: String
    - maxScore: double
    - weight: double
    + getName(): String
    + getMaxScore(): double
    + getWeight(): double
    + equals(Object obj):boolean
    + toString(): String
}
class Exam
class ClassParticipation
class Assignment

Exam --|> Component
ClassParticipation --|> Component
Assignment --|> Component


class Student{
    - name: String
    - matricNumber: String
    + getName(): String
    + getMatricNumber(): String
    + equals(Object obj): boolean
    + toString(): String
}


class Grade{
    - score: double
    - component: Component
    - student: Student
    + Grade(component: Component, student: Student, score: double)
    + equals(Object obj):boolean
    + toString(): String
}


class AppState
class GradeList{
    + findGrade(student: Student, component: Component): Grade
    + addGrade(grade: Grade): void
    + deleteGrade(grade: Grade): void
    + toString(): String
}
class StudentList {
    + findStudentById(id: String): Student
    + findStudentByName(name: String): Student 
    + addStudent(student: Student): void
    + deleteGrade(student: Student): void
    + toString(): String
}
class ComponentList {
    + findComponent(id: String): Component
    + addComponent(component: Component): void
    + deleteComponent(component: Component): void
    + toString(): String
}

AppState -> "1" GradeList
AppState --> "1" StudentList
AppState -> "1" ComponentList

GradeList -> "*" Grade
ComponentList -> "*" Component
StudentList -> "*" Student

Command .. AppState

class Parser {
    + getArguments(argumentList: String[], line: String): HashMap<String, String>
    + getCommand(line: String) : Command
}

Parser .. Command

}

@enduml